//
//  androidbuild.gradle
//  Chilli Source
//  Created by Ian Copland on 13/03/2015.
//
//  The MIT License (MIT)
//
//  Copyright (c) 2015 Tag Games Limited
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

import com.sun.tools.classfile.Dependency
import org.apache.tools.ant.taskdefs.condition.Os
import java.lang.Runtime
import java.lang.Process

/**
 * Prints anything in the given buffered stream.
 *
 * @author Ian Copland
 *
 * @param in_stream - The input stream.
 * @param in_printAsError - If true, any messages will be printed as an error message.
 */
def printStream(InputStream in_stream, boolean in_printAsError) {
    try {
        def bufferedInputReader = new BufferedReader(new InputStreamReader(in_stream));
        String line = null;
        while ((line = bufferedInputReader.readLine()) != null) {
            if (in_printAsError == true) {
                System.err.println(line);
            } else {
                System.out.println(line);
            }
        }
    }
    catch (Exception e) {
        System.err.println(e.toString());
        e.printStackTrace();
    }
}
/**
 * Executes the given command line parameters. Outputs the contents of both the input stream
 * and error stream to console.
 *
 * @author Ian Copland
 *
 * @param in_commands - The array of commands
 */
def executeCommand(String[] in_commands) {
    final def process = new ProcessBuilder(in_commands).start();
    def inputRunnable = new Runnable() {
        @Override public void run() {
            printStream(process.getInputStream(), false);
        }
    };
    def errorRunnable = new Runnable() {
        @Override public void run() {
            printStream(process.getErrorStream(), true);
        }
    };
    def inputThread = new Thread(inputRunnable);
    def errorThread = new Thread(errorRunnable);
    inputThread.start();
    errorThread.start();
    inputThread.join();
    errorThread.join();
    process.waitFor();
    process.destroy();
}
/**
 * @author Ian Copland
 *
 * @param in_taskName - The name of the task.
 *
 * @return Whether or not the given task name follows the convention set for Task tasks.
 */
def isTestFromTaskName(String in_taskName) {
    String lowerTaskName = in_taskName.toLowerCase()
    if (lowerTaskName.contains('unittest') == true || lowerTaskName.contains('androidtest') == true) {
        return true
    }
    return false
}
/**
 * @author Ian Copland
 *
 * @param in_taskName - The name of the task.
 *
 * @return Whether or not the given task name follows the convent set for debug tasks.
 */
def isDebugFromTaskName(String in_taskName)
{
    String lowerTaskName = in_taskName.toLowerCase()
    if (lowerTaskName.contains('debug') == true) {
        return true
    } else if (lowerTaskName.contains('release') == true){
        return false
    } else {
        System.err.println("Task '$taskName' does not specify release or debug.")
        return false
    }
}
/**
 * @author Ian Copland
 *
 * @param in_taskName - The name of the task.
 *
 * @return The name of the ABI the task relates to, based on the naming convention.
 */
def getAbiFromTaskName(String in_taskName)
{
    String lowerTaskName = in_taskName.toLowerCase()
    if (lowerTaskName.contains('armv7') == true) {
        return "armeabi-v7a"
    } else if (lowerTaskName.contains('arm')){
        return "armeabi"
    } else if (lowerTaskName.contains('x86')){
        return "x86"
    } else {
        System.err.println("Task '$taskName' does not specify an abi.")
        return "armeabi"
    }
}
/**
 * @author Ian Copland
 *
 * @param in_taskName - The name of the task.
 *
 * @return The name of the SKU the task relates to, based on the naming convention.
 */
def getSkuFromTaskName(String in_taskName)
{
    String lowerTaskName = in_taskName.toLowerCase()
    if (lowerTaskName.toLowerCase().contains('googleplay') == true) {
        return "googleplay"
    } else if (lowerTaskName.contains('amazon')){
        return "amazon"
    } else {
        System.err.println("Task '$taskName' does not specify a sku.")
        return "googleplay"
    }
}
/**
 * Reads the local.properties file to get the location of the NDK.
 *
 * @author Ian Copland
 *
 * @return the location of the NDK.
 */
def getNDKPath() {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream {
            stream -> properties.load(stream)
        }
        def ndkDir = properties.getProperty('ndk.dir')
        if (ndkDir == null) {
            throw new Exception("The ndk.dir property in local.propeties is not set")
        }
        def ndkBuild = Os.isFamily(Os.FAMILY_WINDOWS) ? "$ndkDir/ndk-build.cmd" : "$ndkDir/ndk-build"
        return ndkBuild
    } else {
        throw new Exception("The local.properties file does not exist")
    }
}
/**
 * Builds native source using the NDK with the given settings.
 *
 * @author Ian Copland
 *
 * @param in_sku - The SKU which the source should be built for.
 * @param in_abi - The ABI thes source should be built for.
 * @param in_debug - Whether or not the build should have debug symbols.
 */
def buildNdk(String in_sku, String in_abi, boolean in_debug) {
    def jniPath = file('src/main/jni').absolutePath
    if (in_debug == true) {
        String[] commands = [ getNDKPath(), "-C", jniPath, "-j4", "CS_FLAVOUR_SKU=$in_sku", "APP_ABI=$in_abi", "NDK_DEBUG=1" ];
        executeCommand(commands);
    } else {
        String[] commands = [ getNDKPath(), "-C", jniPath, "-j4", "CS_FLAVOUR_SKU=$in_sku", "APP_ABI=$in_abi" ];
        executeCommand(commands);
    }
}
/**
 * Cleans native source for all abis, skus and both debug and release.
 *
 * @author Ian Copland
 */
def cleanNdk() {
    def jniPath = file('src/main/jni').absolutePath

    String[] commandsRelease = [ getNDKPath(), "-C", jniPath, "clean", "APP_ABI=armeabi,armeabi-v7a,x86", "CS_CLEAN=1" ];
    executeCommand(commandsRelease);

    String[] commandsDebug = [ getNDKPath(), "-C", jniPath, "clean", "APP_ABI=armeabi,armeabi-v7a,x86", "NDK_DEBUG=1", "CS_CLEAN=1"  ];
    executeCommand(commandsDebug);
}
/**
 * Bundles the resources that should be copied to the APK.
 *
 * @author Ian Copland
 */
def generateResources() {
    def scriptPath = file("$csProjectRoot/ChilliSource/Tools/Scripts/copy_android_resources.py").absolutePath
    def csProjectPath = file(csProjectRoot).absolutePath
    def androidProjectPath = file("src/main/").absolutePath
    String[] commands = [ "python", scriptPath, csProjectPath, androidProjectPath ]
    executeCommand(commands);
}

ext {
    csProjectRoot = "../../../.."

    /**
     * A task which will execute the NDK clean command.
     *
     * @author Ian Copland
     */
    task csCleanNdk << {
        cleanNdk()
    }
    /**
     * Adds task dependencies as required for building a ChilliSource library.
     *
     * @author Ian Copland
     *
     * @param in_tasks - The gradle tasks dependencies will be added to.
     */
    csInitLibrary = { in_tasks ->

        in_tasks.all() { currentTask ->
            def taskName = currentTask.name.toLowerCase();

            //If it is the "clean" task also hook in the ChilliSource clean event.
            if (taskName == "clean") {
                currentTask.dependsOn(csCleanNdk)

            //if it is a ndk compile task, replace it with the ChilliSource ndk compile task.
            } else if (taskName.startsWith("compile") == true && taskName.endsWith("ndk") == true) {

                currentTask.dependsOn.clear();
                currentTask.deleteAllActions();

                //exclude test tasks to avoid duplicate version of the created task.
                if (isTestFromTaskName(taskName) == false) {
                    def sku = getSkuFromTaskName(taskName)
                    def abi = getAbiFromTaskName(taskName)
                    def debug = isDebugFromTaskName(taskName)
                    def debugText = (debug == true) ? "debug" : "release"

                    def csCompileTask = task("csCompileNdk_${sku}_${abi}_${debugText}") << {
                        buildNdk(sku, abi, debug)
                    }

                    //This is a hack to ensure ChilliSource is only built for the ABI/SKU/config that the
                    //application is being built for. This has the draw-back that ChilliSource can no longer
                    //be built on its own, so hopefully a better solution presents itself in the future.
                    csCompileTask.onlyIf {
                        def taskGraph = gradle.taskGraph
                        for (def aTask : taskGraph.getAllTasks()) {
                            if (aTask.project.name.equals("app") && aTask.name.equals(csCompileTask.name) == true) {
                                return true
                            }
                        }
                        return false
                    }
                    currentTask.dependsOn(csCompileTask)
                }
            }
        }
    }
    /**
     * Adds task dependencies as requires for building a ChilliSource application.
     *
     * @author Ian Copland
     *
     * @param in_tasks - The gradle tasks dependencies will be added to.
     */
    csInitApplication = { in_tasks ->

        in_tasks.all() { currentTask ->
            def taskName = currentTask.name.toLowerCase();

            //if it is the 'clean' task also hook in the ChilliSource clean event.
            if (taskName == "clean") {
                currentTask.dependsOn(csCleanNdk)

            //if it is a ndk compile task, replace it with the ChilliSource ndk compile task.
            } else if (taskName.startsWith("compile") == true && taskName.endsWith("ndk") == true) {

                currentTask.dependsOn.clear();
                currentTask.deleteAllActions();

                //exclude test tasks to avoid duplicate version of the created task.
                if (isTestFromTaskName(taskName) == false) {
                    def sku = getSkuFromTaskName(taskName)
                    def abi = getAbiFromTaskName(taskName)
                    def debug = isDebugFromTaskName(taskName)
                    def debugText = (debug == true) ? "debug" : "release"

                    task "csCompileNdk_${sku}_${abi}_${debugText}" (dependsOn: ":chillisource:csCompileNdk_${sku}_${abi}_${debugText}") << {
                        buildNdk(sku, abi, debug)
                    }
                    task "csGenerateResources_${sku}_${abi}_${debugText}" (dependsOn: "csCompileNdk_${sku}_${abi}_${debugText}") << {
                        generateResources()
                    }
                    currentTask.dependsOn("csGenerateResources_${sku}_${abi}_${debugText}")
                }
            }
        }
    }
    /**
     * Adds the default library dependencies required by ChilliSource.
     *
     * @author Ian Copland
     *
     * @param in_dependencies - The dependencies.
     */
    csAddDefaultDependencies = { in_dependencies ->
        in_dependencies.compile('com.android.support:appcompat-v7:21.0.3')
        in_dependencies.compile('com.google.android.gms:play-services:6.5.87')
        in_dependencies.compile('com.facebook.android:facebook-android-sdk:3.23.1')
    }
    /**
     * Android Gradle currently does not support dependencies for specific combinations of build
     * type and product flavour. This provides a means to handle it, by mapping application
     * build variant to a ChilliSource build variant.
     *
     * @author Ian Copland
     *
     * @param in_dependencies - The dependencies.
     * @param in_configurations - The configurations.
     * @param in_csDependencyMap - The map of application variants to ChilliSource variants.
     */
    csAddCSDependencies = { in_dependencies, in_configurations, in_csDependencyMap ->

        def depsMap = new HashMap<String, Dependency>()
        for (Map.Entry<String, String> entry : in_csDependencyMap) {
            depsMap.put("${entry.getKey()}Compile", in_dependencies.project(path: ":chillisource", configuration: entry.getValue()))
        }

        in_configurations.all() { config ->
            def dep = depsMap.get("${config.name}")
            if(dep != null) {
                config.dependencies.add(dep)
            }
        }
    }
    /**
     * External library projects are currently bugged such that they depend on all build variants
     * in a project. This causes a number of issues (and long build times!) for native projects,
     * so this can be used to solve the issue for the default dependencies.
     *
     * @author Ian Copland
     *
     * @param in_tasks - All tasks in the android project.
     */
    csFixDefaultLibraryDependancies = { in_tasks ->

        in_tasks.all() { task ->

            def taskName = task.name.toLowerCase()
            if (taskName.equals("prepareComAndroidSupportAppcompatV72103Library") == true || taskName.contains("prepareComAndroidSupportSupportV42103Library") == true ||
                taskName.equals("prepareComGoogleAndroidGmsPlayServices6587Library") == true || taskName.equals("prepareComFacebookAndroidFacebookAndroidSdk3231Library") == true) {
                task.dependsOn.clear()
            }
        }
    }
}