//
//  AudioLoader.h
//  Chilli Source
//
//  Created by Scott Downie on 16/11/2010.
//  Copyright 2010 Tag Games. All rights reserved.
//


#ifndef _CHILLISOURCE_BACKEND_AUDIO_FMOD_BASE_AUDIOLOADER_H_
#define _CHILLISOURCE_BACKEND_AUDIO_FMOD_BASE_AUDIOLOADER_H_

#include <ChilliSource/Audio/Base/AudioLoader.h>
#include <ChilliSource/Backend/Audio/FMOD/ForwardDeclarations.h>

namespace ChilliSource
{
	namespace FMOD
	{
        class FMODSystem;
        
        //-------------------------------------------------------
        /// Factory class for loading audio resources with FMOD.
        ///
        /// @author S Downie
        //-------------------------------------------------------
		class AudioLoader final : public Audio::AudioLoader
		{
		public:
			
            //-------------------------------------------------------------------------
			/// @author S Downie
			///
			/// @param Interface to compare
            ///
			/// @return Whether the object implements the given interface
			//-------------------------------------------------------------------------
			bool IsA(Core::InterfaceIDType in_interfaceID) const override;
			//----------------------------------------------------------------------------
			/// @author S Downie
			///
			/// @param Type to compare
            ///
			/// @return Whether the object can create a resource of given type
			//----------------------------------------------------------------------------
			bool CanCreateResourceOfKind(Core::InterfaceIDType in_interfaceID) const override;
			//----------------------------------------------------------------------------
			/// @author S Downie
			///
			/// @param Extension to compare
            ///
			/// @return Whether the object can create a resource with the given extension
			//----------------------------------------------------------------------------
			bool CanCreateResourceFromFileWithExtension(const std::string& in_extension) const override;
			//----------------------------------------------------------------------------
            /// Load audio resource from the given file
            ///
            /// @author S Downie
            ///
            /// @param The storage location to load from
			/// @param Filename
			/// @param [Out] Resource object
            ///
			/// @return Success
			//----------------------------------------------------------------------------
			bool CreateResourceFromFile(Core::StorageLocation in_storageLocation, const std::string& in_filePath, Core::ResourceSPtr& out_resource) override;
            //-------------------------------------------------------------------------
            /// Load the audio resource on a background thread from the given
            /// file location
            ///
			/// @author S Downie
			///
            /// @param The storage location to load from
			/// @param Filename
			/// @param [Out] Resource object
            ///
			/// @return Whether the resource was loaded
			//-------------------------------------------------------------------------
			bool AsyncCreateResourceFromFile(Core::StorageLocation in_storageLocation, const std::string& in_filePath, Core::ResourceSPtr& out_resource) override;
			//----------------------------------------------------------------------------
			/// Stream audio resource from the given file
            ///
            /// @author S Downie
            ///
            /// @param The storage location to load from
			/// @param Filename
			/// @param [Out] Resource object
            ///
			/// @return Success
			//----------------------------------------------------------------------------
			bool StreamResourceFromFile(Core::StorageLocation in_storageLocation, const std::string& in_filePath, Core::ResourceSPtr& out_resource);
			//----------------------------------------------------------------------------
			/// @author S Downie
			///
			/// @return New audio listener
			//----------------------------------------------------------------------------
			Audio::AudioListenerUPtr CreateAudioListener() override;
            //-------------------------------------------------------
			/// Tell FMOD to load event data generated by the
			/// fmod designer
            ///
            /// @author S Downie
			///
            /// @param Location
			/// @param File path
			//-------------------------------------------------------
			void LoadEventData(Core::StorageLocation in_storageLocation, const std::string& in_filePath);
			//-------------------------------------------------------
			///	Unload event group with the given name
            ///
            /// @author S Downie
			///
			/// @param Group name
			//-------------------------------------------------------
			void UnloadEventData(const std::string& in_groupName);
			//-------------------------------------------------------
			/// Preload events inside a specified group
            ///
            /// @author S Downie
			///
			/// @param Group name
			//-------------------------------------------------------
			void PreloadEventGroup(const std::string& in_groupName);
            
        private:
            
            friend Audio::AudioLoaderUPtr Audio::AudioLoader::Create(Audio::AudioSystem*);
            //-------------------------------------------------------
            /// Private constructor to force use of factory method
            ///
            /// @author S Downie
            ///
            /// @param FMOD system
            //-------------------------------------------------------
            AudioLoader(FMOD::FMODSystem* in_system);
			
		private:

			FMODSystem* m_FMODSystem;
		};
	}
}

#endif

