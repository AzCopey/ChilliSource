//
//  TextureAtlas.h
//  Chilli Source
//
//  Created by Scott Downie on 22/10/2010.
//  Copyright 2010 Tag Games. All rights reserved.
//

#ifndef _CHILLISOURCE_RENDERING_TEXTURE_TEXTUREATLAS_H_
#define _CHILLISOURCE_RENDERING_TEXTURE_TEXTUREATLAS_H_

#include <ChilliSource/ChilliSource.h>
#include <ChilliSource/Core/Math/Geometry/Shapes.h>
#include <ChilliSource/Core/Resource/Resource.h>
#include <ChilliSource/Rendering/Texture/UVs.h>

#include <unordered_map>

namespace ChilliSource
{
	namespace Rendering
	{
        //---------------------------------------------------------------------
        /// A resource that holds the information about packed textures in a
        /// texture page. Includes methods for accessing the individual texture
        /// data (such as UVs, size, etc) by name.
        ///
        /// @author S Downie
        //---------------------------------------------------------------------
		class TextureAtlas final : public Core::Resource
		{
		public:
			
            //---------------------------------------------------------------------
            /// Holds the description of a single frame (or texture) packed into
            /// the atlas. This includes the size, UVs, etc
            ///
            /// @author S Downie
            //---------------------------------------------------------------------
			struct Frame
			{
				s16 m_texCoordU;
				s16 m_texCoordV;
				s16 m_width;
				s16 m_height;
				s16 m_offsetX;
				s16 m_offsetY;
                s16 m_originalWidth;
                s16 m_originalHeight;
			};
            //---------------------------------------------------------------------
            /// Holds the description of a texture atlas. Used to build the resource
            ///
            /// @author S Downie
            //---------------------------------------------------------------------
            struct Descriptor
            {
                std::vector<Frame> m_frames;
                std::vector<u32> m_keys;
                
                u32 m_textureAtlasWidth = 0;
                u32 m_textureAtlasHeight = 0;
            };
			
			CS_DECLARE_NAMEDTYPE(TextureAtlas);
			
			//---------------------------------------------------------------------
			/// @author S Downie
			///
            /// @param Interface type
            ///
			/// @return Whether this object is of given type
			//---------------------------------------------------------------------
			bool IsA(Core::InterfaceIDType in_interfaceId) const override;
            //---------------------------------------------------------------------
            /// Construct the sprite sheet data from the given descriptor
            /// this populates the resource ready for use
            ///
            /// @author S Downie
            ///
            /// @param Sprite sheet descriptor
            //---------------------------------------------------------------------
            void Build(const Descriptor& in_desc);
			//---------------------------------------------------------------------
            /// @author S Downie
            ///
			/// @param Texture Id as generated by the sprite tool
            ///
			/// @return Frame data
			//---------------------------------------------------------------------
			const Frame& GetFrame(const std::string& in_textureId) const;
            //---------------------------------------------------------------------
            /// @author S Downie
            ///
            /// @param Texture Id as generated by the sprite tool
            ///
            /// @return Whether frame exists with given Id
            //---------------------------------------------------------------------
            bool HasFrameWithId(const std::string& in_textureId) const;
			//---------------------------------------------------------------------
			/// @author S Downie
			///
			/// @param Texture Id as generated by the sprite tool
            ///
			/// @return Rect containing UV coords for the given frame
			//---------------------------------------------------------------------
			Rendering::UVs GetFrameUVs(const std::string& in_textureId) const;
			//---------------------------------------------------------------------
			/// @author S Downie
			///
			/// @param Texture Id as generated by the sprite tool
            ///
			/// @return Size of the given frame in pixels
			//---------------------------------------------------------------------
			Core::Vector2 GetFrameSize(const std::string& in_textureId) const;
			//---------------------------------------------------------------------
			/// @author S Downie
			///
			/// @param Texture Id as generated by the sprite tool
			///
            /// @return The value in pixels of the X, Y crop offset from the original
            /// sprite.
			//---------------------------------------------------------------------
			Core::Vector2 GetFrameOffset(const std::string& in_textureId) const;
			//---------------------------------------------------------------------
            /// @author S Downie
			///
            /// @param Width of TextureAtlas in pixels
            //---------------------------------------------------------------------
            u32 GetWidth() const;
            //---------------------------------------------------------------------
            /// @author S Downie
			///
            /// @param Height of TextureAtlas in pixels
            //---------------------------------------------------------------------
            u32 GetHeight() const;
            
        private:
            
            friend class Core::ResourcePool;
            //---------------------------------------------------------------------
            /// Factory method to create empty sprite sheet resource. Only called
            /// by the resource pool
            ///
            /// @author S Downie
            ///
            /// @return Ownership of resource
            //---------------------------------------------------------------------
            static TextureAtlasUPtr Create();
            //---------------------------------------------------------------------
            /// Private constructor to enforce use of factory create method
            ///
            /// @author S Downie
            //---------------------------------------------------------------------
            TextureAtlas() = default;
            
		private:
            
            std::unordered_map<u32, Frame> m_frames;
            
            u32 m_textureAtlasWidth = 0;
            u32 m_textureAtlasHeight = 0;
		};
	}
}

#endif